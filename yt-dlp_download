#!/bin/env bash

# Ensure yt-dlp is installed
if ! command -v yt-dlp &>/dev/null; then
    echo "yt-dlp is not installed. Please install it before running this script."
    exit 1
fi

# Ensure GNU parallel is installed
if ! command -v parallel &>/dev/null; then
    echo "GNU parallel is not installed. Please install it before running this script."
    exit 1
fi

# Ensure a file with channel URLs is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <channels_file>"
    exit 1
fi

CHANNELS_FILE="$1"
if [ ! -f "$CHANNELS_FILE" ]; then
    echo "Channels file not found: $CHANNELS_FILE"
    exit 1
fi

BASE_DIR="${BASE_DIR:-$HOME/Videos}"
MAX_PARALLEL_DOWNLOADS="${MAX_PARALLEL_DOWNLOADS:-4}"
LOG_FILE="$BASE_DIR/script.log"
mkdir -p "$BASE_DIR"
touch "$LOG_FILE"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Export the log function
export -f log

# Validate YouTube URLs
is_valid_url() {
    case "$1" in
        https://youtube.com/*|https://www.youtube.com/*|https://youtu.be/*)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Export the validation function
export -f is_valid_url

# Parallel download function
download_channel() {
    CHANNEL_URL="$1"
    [ -z "$CHANNEL_URL" ] && return

    if ! is_valid_url "$CHANNEL_URL"; then
        log "Invalid URL: $CHANNEL_URL"
        return
    fi

    CHANNEL_NAME=$(yt-dlp --get-filename -o "%(channel)s" "$CHANNEL_URL" 2>/dev/null | head -n 1 | sed 's/[^a-zA-Z0-9_-]/_/g')
    if [ -z "$CHANNEL_NAME" ]; then
        log "Failed to fetch channel name for URL: $CHANNEL_URL"
        return
    fi

    CHANNEL_DIR="$BASE_DIR/$CHANNEL_NAME"
    mkdir -p "$CHANNEL_DIR" || { log "Failed to create directory: $CHANNEL_DIR"; return; }

    DATE_DIR="$CHANNEL_DIR/$(date +%Y-%m-%d)"
    mkdir -p "$DATE_DIR" || { log "Failed to create directory: $DATE_DIR"; return; }

    yt-dlp -o "$DATE_DIR/%(title)s.%(ext)s" --download-archive "$CHANNEL_DIR/downloaded_videos.txt" "$CHANNEL_URL" >> "$LOG_FILE" 2>&1
    if [ $? -ne 0 ]; then
        log "Error downloading videos for $CHANNEL_NAME."
    else
        log "Downloaded new videos for $CHANNEL_NAME."
    fi
}

export -f download_channel
export BASE_DIR
export LOG_FILE

# Remove empty lines from the input file before processing
sed -i '/^$/d' "$CHANNELS_FILE"

# Run downloads in parallel
log "Starting download process..."
parallel --will-cite -a "$CHANNELS_FILE" -j "$MAX_PARALLEL_DOWNLOADS" --line-buffer download_channel {}

log "Download process completed."
exit 0
